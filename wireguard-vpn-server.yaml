AWSTemplateFormatVersion: 2010-09-09
Description: >-  
  AWS CloudFormation Template Wireguard VPN Server:
  EC2 instance with ubuntu 22.04 and wireguard vpn server
  
  Following regions are not supported:
    EU Milan (eu-south-1)
    Middle East Bahrain (me-south-1)
    Africa Cape Town (af-south-1)
    Asia Pacific Hong Kong (ap-east-1)
Parameters:
  ConfigScript:
    Type: String
    Default: 'https://raw.githubusercontent.com/wintermute0xd/aws-cloudformation-wireguard/main/cloud-init.sh'
  ConfigFile:
    Type: String
    Default: 'https://raw.githubusercontent.com/wintermute0xd/aws-cloudformation-wireguard/main/wg0.conf'
  InstanceType:
    Description: 'Server EC2 instance type. Only t2.micro is free tier'
    Type: String
    Default: t2.micro
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m1.small
      - m1.medium
      - m1.large
      - m1.xlarge
      - m2.xlarge
      - m2.2xlarge
      - m2.4xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - c1.medium
      - c1.xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - g2.2xlarge
      - g2.8xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - hi1.4xlarge
      - hs1.8xlarge
      - cr1.8xlarge
      - cc2.8xlarge
      - cg1.4xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  
  # ImageId:
  #   Description: 'Image id of Ubuntu22.04 from eu-central-1 region (Frankfurt)'
  #   Type: String
  #   Default: ami-065deacbcaac64cf2
  #   AllowedValues: ['ami-065deacbcaac64cf2', 'ami-052efd3df9dad4825']
Mappings:
  AWSRegionArch2AMI:
    ap-northeast-1:
      AmiID: ami-02ee763250491e04a
    ap-northeast-2:
      AmiID: ami-058165de3b7202099
    ap-northeast-3:
      AmiID: ami-096d800410995ae84
    ap-south-1:
      AmiID: ami-068257025f72f470d
    ap-southeast-1:
      AmiID: ami-02ee763250491e04a
    ap-southeast-2:
      AmiID: ami-0e040c48614ad1327
    ca-central-1:
      AmiID: ami-0b6937ac543fe96d7
    eu-central-1: 
      AmiID: ami-065deacbcaac64cf2
    eu-north-1:
      AmiID: ami-0440e5026412ff23f
    eu-west-1:
      AmiID: ami-0d75513e7706cf2d9
    eu-west-2:
      AmiID: ami-0fb391cce7a602d1f
    eu-west-3:
      AmiID: ami-09e513e9eacab10c1
    sa-east-1:
      AmiID: ami-08ae71fd7f1449df1
    us-east-1: 
      AmiID: ami-052efd3df9dad4825
    us-east-2:
      AmiID: ami-02f3416038bdb17fb
    us-west-1:
      AmiID: ami-085284d24fe829cd0
    us-west-2:
      AmiID: ami-0d70546e43a941d70
Resources:
# Create key pair for ssh login. Priv key in params store
  VPNServerKeyPair:
    Type:       AWS::EC2::KeyPair
    Properties:
      KeyName: 'MyKeyToVPNServer'
      KeyType: 'rsa'

# Create Internet Gateway to enable access VPC to the Internet
  VPNServerInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: 'Name'
        Value: 'VPNServerIGW'

# Create VPC for VPN server
  VPNServerVPC:
    Type:                 AWS::EC2::VPC
    Properties: 
      CidrBlock:          '192.168.0.0/16'
      EnableDnsHostnames: 'true'
      EnableDnsSupport:   'true'
      Tags:
        - Key:             'Name'
          Value:           'MyVPNServerVPC'

# Create subnet in VPC
  VPNServerSubnet:
    Type: AWS::EC2::Subnet
    Properties: 
      CidrBlock:            '192.168.0.1/24'
      MapPublicIpOnLaunch:  'true'
      Tags: 
        - Key:    'Name'
          Value:  'VPNServerSubnet'
      VpcId:      !Ref VPNServerVPC

# Attach created earlier Internet Gateway
  VPNServerAttachIGW:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn: VPNServerInternetGateway
    Properties:
      InternetGatewayId: !Ref VPNServerInternetGateway
      VpcId: !Ref VPNServerVPC

# Create public routes table for VPC
  VPNServerPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPNServerVPC
      Tags:
        - Key: "Name"
          Value: "PublicRouteTable"

# Create a route for the table which will forward the traffic
# from the gateway
  VPNServerDefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPNServerAttachIGW
    Properties:
      RouteTableId: !Ref VPNServerPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref VPNServerInternetGateway

# Associate route table (which contains default route) to newly created subnet
  PublicRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: VPNServerPublicRouteTable
    Properties:
      RouteTableId: !Ref VPNServerPublicRouteTable
      SubnetId: !Ref VPNServerSubnet

# Create security group and open 22, 52888 ports
  VPNServerSecGroup:  
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: 'SG for wireguard vpn server'
      GroupName: 'VPNServerSG-ssh-wg52888'
      SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: '22'
            ToPort: '22'
            CidrIp: 0.0.0.0/0
          - IpProtocol: udp
            FromPort: '52888'
            ToPort: '52888'
            CidrIp: '0.0.0.0/0'
          - IpProtocol: tcp
            FromPort: '80'
            ToPort: '80'
            CidrIp: '0.0.0.0/0'
      VpcId: !Ref VPNServerVPC

# Create role for ec2 to access ssm parameters store
  EC2SSMAccessRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: SSMAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 'ssm:put*'
                Resource: '*'

# Create instanse profile to be able to attach it to ec2
  EC2InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref EC2SSMAccessRole

# Create parameter in ssm param store
  BasicParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: '/wg0/pubkey'
      Type: String
      Value: 'placeholder'
# Create EC2 instance and install wireguard on it
  MyVPNServerEC2:
    Type: AWS::EC2::Instance
    Properties:
      #ImageId: !Ref ImageId
      ImageId: !FindInMap
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - AmiID
      SubnetId: !Ref VPNServerSubnet
      InstanceType: !Ref InstanceType
      KeyName: !Ref VPNServerKeyPair
      SecurityGroupIds:
        - !Ref VPNServerSecGroup
      BlockDeviceMappings:
        -
          DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 10
      IamInstanceProfile: !Ref EC2InstanceProfile
      Tags:
        - Key: 'Name'
          Value: 'wg-vpn-server'
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            mkdir -p /etc/wireguard
            cd /etc/wireguard
            wget ${ConfigScript} -O ./cloud-init.sh
            chmod +x cloud-init.sh
            wget ${ConfigFile} -O ./wg0.conf
            echo ${AWS::Region} > /home/ubuntu/test.txt
            export AWSREG=${AWS::Region}
            ./cloud-init.sh

Outputs:
  Endpoint:
    Value: !Join
      - ''
      - - !GetAtt 
          - MyVPNServerEC2
          - PublicIp
        - ':52888'

  Web:
    Value: !Join ['', ['http://', !GetAtt MyVPNServerEC2.PublicDnsName]]
